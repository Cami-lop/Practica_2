geom_line() +
theme_bw()
Datos <- filter(Datos,  Sujeto != 'Enana')
ggplot(data = Datos, aes(x = Etapa,
y = Frec_card_bpm,
colour = Sujeto,
group = Sujeto)) +
labs(x = "Etapa",
y = "Frecuencia cardiaca (bpm)") +
geom_point() +
geom_line() +
theme_bw()
Datos$Etapa <- relevel(Datos$Etapa, ref = "Sentado")
# Vamos a plantear un modelo condicional que incorpora al Sujeto como factor aleatorio:
# En principio planteemos el modelo suponiendo que la varianza es igual para cada Etapa.
# Luego veremos si se cumple el supuesto de Homocedasticidad (homogeneidad de varianzas).
modelo_1 <- lme(Frec_card_bpm ~ Etapa, random = ~ 1 | Sujeto, na.action = na.omit, data = Datos)
supuestos <- function (modelo) {
residuos <- resid(modelo, type = "pearson")
predichos <- predict(modelo)
par(mfrow = c(1, 2))
plot(x = predichos,
y = residuos,
ylim = c(-4, 4),
xlab = "Predichos",
ylab = "Residuos de Pearson",
main = "Grafico de dispersion de residuos v. predichos",
cex.main = 0.8 )
abline(h = c(-2, 2, 0),
col = c("red", "red", "black"),
lty = c(2, 2, 1))
qqnorm(residuos, cex.main = 0.8)
qqline(residuos)
shapiro.test(residuos)
}
# Vamos a probarla con el modelo generado:
supuestos(modelo_1)
modelo_2 <- lme(Frec_card_bpm ~ Etapa,
random = ~ 1 | Sujeto,
weights = varIdent(form = ~ 1 | Etapa ), na.action = na.omit, data = Datos)
supuestos(modelo_2)
# En primer lugar vamos a utilizar la funcion anova() para
# ver si existen diferencias entre algunas de las etapas.
anova(modelo_2)
dunnet <- glht(modelo_2, linfct = mcp(Etapa = "Dunnett"), data = Datos)
summary(dunnet) # Muestra los resultados
confint(dunnet) # Para obtener los intervalos de confianza de los coeficientes que indican la magnitud de las diferencias.
emmeans(modelo_2,
pairwise  ~ Etapa,
adjust = "tukey")
#################################### Sistolica #############
# Antes que nada veamos si hay algun objeto almacenado en la memoria
ls()
# Si te aparece character(0) es que la memoria esta limpia, si no ejecuta
# lo siguiente para borrar la memoria
rm(list=ls())
# Revisamos...
ls()
# Para limpiar la consola se puede ejecutar lo siguiente
cat("\014")
## Para instalar un paquete:
install.packages("readxl")
## Para instalar multiples paquetes ejecutar lo siguiente:
## (instala los paquetes del parentesis que no estan instalados)
list.of.packages <- c("ggplot2", "nlme", "multcomp", "emmeans")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
## Para cargar los paquetes, usar la funcion library
library(readxl)    # Para leer un archivo de Excel (.xlsx)
library(ggplot2)   # Para hacer graficos
library(nlme)      # Para plantear el modelo
library(multcomp)  # Para hacer comparaciones a posteriori
library(emmeans)   # Para hacer comparaciones a posteriori
# Importamos los datos del archivo xlsx:
Datos <- read_excel("Resultados TP ejercicio 2023.xlsx")
# Veamos la tabla de datos:
View(Datos)
# Ahora veamos lo que nos devuelve la funcion summary():
summary(Datos)
# Podemos chequear el tipo de variable usando la funcion class():
class(Datos$Sujeto) # Para la variable Sujeto
class(Datos$Etapa)  # Para la variable Etapa
# Observen que el R toma a las variables Sujeto y Etapa como variables "character", es decir, como texto.
# Para que las considere como factores (variables categoricas) utilizamos la funcion factor() sobre las variables:
Datos$Sujeto <- factor(Datos$Sujeto) # Considera a la variable Sujeto como un factor
Datos$Etapa <- factor(Datos$Etapa) # Considera a la variable Etapa como un factor
# Chequeemos que ahora esten como factores:
class(Datos$Sujeto)
class(Datos$Etapa)
# Veamos que orden toma R por defecto (spoiler: alfabetico):
levels(Datos$Etapa)
# Utilizamos el argumento 'levels' de la funcion factor() para reordenar los niveles.
Datos$Etapa <- factor(Datos$Etapa,
levels = c("Recostado", "Sentado", "Ejercicio1", "Ejercicio2", "Recuperacion1", "Recuperacion2"))
# Veamos si dio resultado:
levels(Datos$Etapa)
ggplot(Datos, aes(x = Etapa, y =Frec_vent_Ciclos_min)) +
#  geom_boxplot(aes(color = Etapa), color="black")+
geom_violin()+
stat_summary(fun=mean, geom="point", shape=20, size=4, color="black", fill="black") +
theme_bw()+
geom_jitter(alpha = 0.7, size = 2,aes(color = Etapa), position = position_jitter(width = .2))+theme(legend.position="right", legend.text=element_text(size = 14),legend.title = element_text(size=12, face="bold")) +
ylab("Frecuencia cardiaca (bpm)") + xlab("Etapa")+
theme_bw()
ggplot(data = Datos, aes(x = Etapa,
y = Frec_vent_Ciclos_min,
colour = Sujeto,
group = Sujeto)) +
labs(x = "Etapa",
y = "Frecuencia cardiaca (bpm)") +
geom_point() +
geom_line() +
theme_bw()
ggplot(Datos, aes(x = Etapa, y =Frec_vent_Ciclos_min)) +
#  geom_boxplot(aes(color = Etapa), color="black")+
geom_violin()+
stat_summary(fun=mean, geom="point", shape=20, size=4, color="black", fill="black") +
theme_bw()+
geom_jitter(alpha = 0.7, size = 2,aes(color = Etapa), position = position_jitter(width = .2))+theme(legend.position="right", legend.text=element_text(size = 14),legend.title = element_text(size=12, face="bold")) +
ylab("Frecuencia ventilatoria (ciclos/min)") + xlab("Etapa")+
theme_bw()
ggplot(data = Datos, aes(x = Etapa,
y = Frec_vent_Ciclos_min,
colour = Sujeto,
group = Sujeto)) +
labs(x = "Etapa",
y = "Frecuencia ventilatoria (ciclos/min)") +
geom_point() +
geom_line() +
theme_bw()
# Antes de plantear el modelo, vamos a definir a la Etapa "Sentado" como nuestro nivel de referencia,
# dado que es la etapa control.
Datos$Etapa <- relevel(Datos$Etapa, ref = "Sentado")
# Vamos a plantear un modelo condicional que incorpora al Sujeto como factor aleatorio:
# En principio planteemos el modelo suponiendo que la varianza es igual para cada Etapa.
# Luego veremos si se cumple el supuesto de Homocedasticidad (homogeneidad de varianzas).
modelo_1 <- lme(Frec_vent_Ciclos_min ~ Etapa, random = ~ 1 | Sujeto, na.action = na.omit, data = Datos)
### Creacion de la funcion.
# Vamos a llamarla supuestos() y va a tener un unico argumento, que es el modelo que queremos evaluar. Este argumento se llamara 'modelo'.
# (aca estamos definiendo la funcion, no la estamos utilizando todavia)
supuestos <- function (modelo) {
residuos <- resid(modelo, type = "pearson")
predichos <- predict(modelo)
par(mfrow = c(1, 2))
plot(x = predichos,
y = residuos,
ylim = c(-4, 4),
xlab = "Predichos",
ylab = "Residuos de Pearson",
main = "Grafico de dispersion de residuos v. predichos",
cex.main = 0.8 )
abline(h = c(-2, 2, 0),
col = c("red", "red", "black"),
lty = c(2, 2, 1))
qqnorm(residuos, cex.main = 0.8)
qqline(residuos)
shapiro.test(residuos)
}
# Vamos a probarla con el modelo generado:
supuestos(modelo_1)
modelo_2 <- lme(Frec_vent_Ciclos_min ~ Etapa,
random = ~ 1 | Sujeto,
weights = varIdent(form = ~ 1 | Etapa ), na.action = na.omit, data = Datos)
# Chequeamos si ahora se cumplen los supuestos de este nuevo modelo,
# aplicando nuevamente la funcion previamente creada para este fin:
supuestos(modelo_2)
# Lo hago con modelo 1 porque con esta variable dio bien!
# En primer lugar vamos a utilizar la funcion anova() para
# ver si existen diferencias entre algunas de las etapas.
anova(modelo_1)
dunnet <- glht(modelo_1, linfct = mcp(Etapa = "Dunnett"), data = Datos)
summary(dunnet) # Muestra los resultados
confint(dunnet)
# Importamos los datos del archivo xlsx:
Datos <- read_excel("Resultados TP ejercicio 2023.xlsx")
# Ahora veamos lo que nos devuelve la funcion summary():
summary(Datos)
# Podemos chequear el tipo de variable usando la funcion class():
class(Datos$Sujeto) # Para la variable Sujeto
class(Datos$Etapa)  # Para la variable Etapa
# Observen que el R toma a las variables Sujeto y Etapa como variables "character", es decir, como texto.
# Para que las considere como factores (variables categoricas) utilizamos la funcion factor() sobre las variables:
Datos$Sujeto <- factor(Datos$Sujeto) # Considera a la variable Sujeto como un factor
Datos$Etapa <- factor(Datos$Etapa) # Considera a la variable Etapa como un factor
# Chequeemos que ahora esten como factores:
class(Datos$Sujeto)
class(Datos$Etapa)
# Veamos que orden toma R por defecto (spoiler: alfabetico):
levels(Datos$Etapa)
# Utilizamos el argumento 'levels' de la funcion factor() para reordenar los niveles.
Datos$Etapa <- factor(Datos$Etapa,
levels = c("Recostado", "Sentado", "Ejercicio1", "Ejercicio2", "Recuperacion1", "Recuperacion2"))
# Veamos si dio resultado:
levels(Datos$Etapa)
## Box-plot (con la media marcada con un punto rojo)
ggplot(Datos, aes(x = Etapa, y =Frec_vent_Ciclos_min)) +
#  geom_boxplot(aes(color = Etapa), color="black")+
geom_violin()+
stat_summary(fun=mean, geom="point", shape=20, size=4, color="black", fill="black") +
theme_bw()+
geom_jitter(alpha = 0.7, size = 2,aes(color = Etapa), position = position_jitter(width = .2))+theme(legend.position="right", legend.text=element_text(size = 14),legend.title = element_text(size=12, face="bold")) +
ylab("Frecuencia ventilatoria (ciclos/min)") + xlab("Etapa")+
theme_bw()
## Box-plot (con la media marcada con un punto rojo)
ggplot(Datos, aes(x = Etapa, y =P_Q_ms)) +
#  geom_boxplot(aes(color = Etapa), color="black")+
geom_violin()+
stat_summary(fun=mean, geom="point", shape=20, size=4, color="black", fill="black") +
theme_bw()+
geom_jitter(alpha = 0.7, size = 2,aes(color = Etapa), position = position_jitter(width = .2))+theme(legend.position="right", legend.text=element_text(size = 14),legend.title = element_text(size=12, face="bold")) +
ylab("Intervalo P-Q (ms)") + xlab("Etapa")+
theme_bw()
ggplot(data = Datos, aes(x = Etapa,
y = P_Q_ms,
colour = Sujeto,
group = Sujeto)) +
labs(x = "Etapa",
y = "Intervalo P-Q (ms)") +
geom_point() +
geom_line() +
theme_bw()
#library("dplyr")
Datos <- filter(Datos,  P_Q_ms< 400)
ggplot(data = Datos, aes(x = Etapa,
y = P_Q_ms,
colour = Sujeto,
group = Sujeto)) +
labs(x = "Etapa",
y = "Intervalo P-Q (ms)") +
geom_point() +
geom_line() +
theme_bw()
Datos$Etapa <- relevel(Datos$Etapa, ref = "Sentado")
# Vamos a plantear un modelo condicional que incorpora al Sujeto como factor aleatorio:
# En principio planteemos el modelo suponiendo que la varianza es igual para cada Etapa.
# Luego veremos si se cumple el supuesto de Homocedasticidad (homogeneidad de varianzas).
modelo_1 <- lme(P_Q_ms ~ Etapa, random = ~ 1 | Sujeto, na.action = na.omit, data = Datos)
### Creacion de la funcion.
# Vamos a llamarla supuestos() y va a tener un unico argumento, que es el modelo que queremos evaluar. Este argumento se llamara 'modelo'.
# (aca estamos definiendo la funcion, no la estamos utilizando todavia)
supuestos <- function (modelo) {
residuos <- resid(modelo, type = "pearson")
predichos <- predict(modelo)
par(mfrow = c(1, 2))
plot(x = predichos,
y = residuos,
ylim = c(-4, 4),
xlab = "Predichos",
ylab = "Residuos de Pearson",
main = "Grafico de dispersion de residuos v. predichos",
cex.main = 0.8 )
abline(h = c(-2, 2, 0),
col = c("red", "red", "black"),
lty = c(2, 2, 1))
qqnorm(residuos, cex.main = 0.8)
qqline(residuos)
shapiro.test(residuos)
}
# Vamos a probarla con el modelo generado:
supuestos(modelo_1)
# Modelamos la varianza con la funcion varIdent, que estima una varianza distinta
# para cada grupo (en este caso una varianza para cada nivel de la variable 'Etapa').
# HACER ESTO SOLO SI LOS SUPUESTOS NO SE CUMPLEN PARA EL MODELO ANTERIORMENTE PLANTEADO
modelo_2 <- lme(P_Q_ms ~ Etapa,
random = ~ 1 | Sujeto,
weights = varIdent(form = ~ 1 | Etapa ), na.action = na.omit, data = Datos)
# Chequeamos si ahora se cumplen los supuestos de este nuevo modelo,
# aplicando nuevamente la funcion previamente creada para este fin:
supuestos(modelo_2)
# Lo hago con modelo 1 porque con esta variable dio decente, ponele
# En primer lugar vamos a utilizar la funcion anova() para
# ver si existen diferencias entre algunas de las etapas.
anova(modelo_1)
# Importamos los datos del archivo xlsx:
Datos <- read_excel("Resultados TP ejercicio 2023.xlsx")
# Ahora veamos lo que nos devuelve la funcion summary():
summary(Datos)
# Podemos chequear el tipo de variable usando la funcion class():
class(Datos$Sujeto) # Para la variable Sujeto
class(Datos$Etapa)  # Para la variable Etapa
# Observen que el R toma a las variables Sujeto y Etapa como variables "character", es decir, como texto.
# Para que las considere como factores (variables categoricas) utilizamos la funcion factor() sobre las variables:
Datos$Sujeto <- factor(Datos$Sujeto) # Considera a la variable Sujeto como un factor
Datos$Etapa <- factor(Datos$Etapa) # Considera a la variable Etapa como un factor
# Chequeemos que ahora esten como factores:
class(Datos$Sujeto)
class(Datos$Etapa)
# Veamos que orden toma R por defecto (spoiler: alfabetico):
levels(Datos$Etapa)
# Utilizamos el argumento 'levels' de la funcion factor() para reordenar los niveles.
Datos$Etapa <- factor(Datos$Etapa,
levels = c("Recostado", "Sentado", "Ejercicio1", "Ejercicio2", "Recuperacion1", "Recuperacion2"))
# Veamos si dio resultado:
levels(Datos$Etapa)
ggplot(Datos, aes(x = Etapa, y =Q_T_ms)) +
#  geom_boxplot(aes(color = Etapa), color="black")+
geom_violin()+
stat_summary(fun=mean, geom="point", shape=20, size=4, color="black", fill="black") +
theme_bw()+
geom_jitter(alpha = 0.7, size = 2,aes(color = Etapa), position = position_jitter(width = .2))+theme(legend.position="right", legend.text=element_text(size = 14),legend.title = element_text(size=12, face="bold")) +
ylab("Intervalo P-Q (ms)") + xlab("Etapa")+
theme_bw()
ggplot(Datos, aes(x = Etapa, y =Q_T_ms)) +
#  geom_boxplot(aes(color = Etapa), color="black")+
geom_violin()+
stat_summary(fun=mean, geom="point", shape=20, size=4, color="black", fill="black") +
theme_bw()+
geom_jitter(alpha = 0.7, size = 2,aes(color = Etapa), position = position_jitter(width = .2))+theme(legend.position="right", legend.text=element_text(size = 14),legend.title = element_text(size=12, face="bold")) +
ylab("Intervalo Q-T (ms)") + xlab("Etapa")+
theme_bw()
ggplot(data = Datos, aes(x = Etapa,
y = Q_T_ms,
colour = Sujeto,
group = Sujeto)) +
labs(x = "Etapa",
y = "Intervalo Q-T (ms)") +
geom_point() +
geom_line() +
theme_bw()
#library("dplyr")
Datos <- filter(Datos,  Q_T_ms > 110)
ggplot(data = Datos, aes(x = Etapa,
y = P_Q_ms,
colour = Sujeto,
group = Sujeto)) +
labs(x = "Etapa",
y = "Intervalo P-Q (ms)") +
geom_point() +
geom_line() +
theme_bw()
ggplot(data = Datos, aes(x = Etapa,
y = Q_T_ms,
colour = Sujeto,
group = Sujeto)) +
labs(x = "Etapa",
y = "Intervalo P-Q (ms)") +
geom_point() +
geom_line() +
theme_bw()
ggplot(data = Datos, aes(x = Etapa,
y = Q_T_ms,
colour = Sujeto,
group = Sujeto)) +
labs(x = "Etapa",
y = "Intervalo Q-T(ms)") +
geom_point() +
geom_line() +
theme_bw()
# Vamos a plantear un modelo condicional que incorpora al Sujeto como factor aleatorio:
# En principio planteemos el modelo suponiendo que la varianza es igual para cada Etapa.
# Luego veremos si se cumple el supuesto de Homocedasticidad (homogeneidad de varianzas).
modelo_1 <- lme(Q_T_ms ~ Etapa, random = ~ 1 | Sujeto, na.action = na.omit, data = Datos)
### Creacion de la funcion.
# Vamos a llamarla supuestos() y va a tener un unico argumento, que es el modelo que queremos evaluar. Este argumento se llamara 'modelo'.
# (aca estamos definiendo la funcion, no la estamos utilizando todavia)
supuestos <- function (modelo) {
residuos <- resid(modelo, type = "pearson")
predichos <- predict(modelo)
par(mfrow = c(1, 2))
plot(x = predichos,
y = residuos,
ylim = c(-4, 4),
xlab = "Predichos",
ylab = "Residuos de Pearson",
main = "Grafico de dispersion de residuos v. predichos",
cex.main = 0.8 )
abline(h = c(-2, 2, 0),
col = c("red", "red", "black"),
lty = c(2, 2, 1))
qqnorm(residuos, cex.main = 0.8)
qqline(residuos)
shapiro.test(residuos)
}
# Vamos a probarla con el modelo generado:
supuestos(modelo_1)
# Lo hago con modelo 1 porque con esta variable dio decente, ponele
# En primer lugar vamos a utilizar la funcion anova() para
# ver si existen diferencias entre algunas de las etapas.
anova(modelo_1)
dunnet <- glht(modelo_1, linfct = mcp(Etapa = "Dunnett"), data = Datos)
summary(dunnet) # Muestra los resultados
confint(dunnet) # Para obtener los intervalos de confianza de los coeficientes que indican la magnitud de las diferencias.
Datos$Etapa <- relevel(Datos$Etapa, ref = "Sentado")
dunnet <- glht(modelo_1, linfct = mcp(Etapa = "Dunnett"), data = Datos)
summary(dunnet) # Muestra los resultados
confint(dunnet) # Para obtener los intervalos de confianza de los coeficientes que indican la magnitud de las diferencias.
# Lo hago con modelo 1 porque con esta variable dio decente, ponele
# En primer lugar vamos a utilizar la funcion anova() para
# ver si existen diferencias entre algunas de las etapas.
Datos$Etapa <- relevel(Datos$Etapa, ref = "Sentado")
anova(modelo_1)
dunnet <- glht(modelo_1, linfct = mcp(Etapa = "Dunnett"), data = Datos)
summary(dunnet) # Muestra los resultados
confint(dunnet) # Para obtener los intervalos de confianza de los coeficientes que indican la magnitud de las diferencias.
# Vamos a plantear un modelo condicional que incorpora al Sujeto como factor aleatorio:
# En principio planteemos el modelo suponiendo que la varianza es igual para cada Etapa.
# Luego veremos si se cumple el supuesto de Homocedasticidad (homogeneidad de varianzas).
modelo_1 <- lme(Q_T_ms ~ Etapa, random = ~ 1 | Sujeto, na.action = na.omit, data = Datos)
### Creacion de la funcion.
# Vamos a llamarla supuestos() y va a tener un unico argumento, que es el modelo que queremos evaluar. Este argumento se llamara 'modelo'.
# (aca estamos definiendo la funcion, no la estamos utilizando todavia)
supuestos <- function (modelo) {
residuos <- resid(modelo, type = "pearson")
predichos <- predict(modelo)
par(mfrow = c(1, 2))
plot(x = predichos,
y = residuos,
ylim = c(-4, 4),
xlab = "Predichos",
ylab = "Residuos de Pearson",
main = "Grafico de dispersion de residuos v. predichos",
cex.main = 0.8 )
abline(h = c(-2, 2, 0),
col = c("red", "red", "black"),
lty = c(2, 2, 1))
qqnorm(residuos, cex.main = 0.8)
qqline(residuos)
shapiro.test(residuos)
}
# Vamos a probarla con el modelo generado:
supuestos(modelo_1)
# Lo hago con modelo 1 porque con esta variable dio decente, ponele
# En primer lugar vamos a utilizar la funcion anova() para
# ver si existen diferencias entre algunas de las etapas.
Datos$Etapa <- relevel(Datos$Etapa, ref = "Sentado")
anova(modelo_1)
dunnet <- glht(modelo_1, linfct = mcp(Etapa = "Dunnett"), data = Datos)
summary(dunnet) # Muestra los resultados
confint(dunnet) # Para obtener los intervalos de confianza de los coeficientes que indican la magnitud de las diferencias.
library(emmeans)
library(car)
?bw.nrd0
rm(list=ls())
getwd()
setwd("/home/clinux01/Descargas/CamiLabo/Practica_2/")
iris    #aparece TODA la infomación
plot(iris) 		#representa graficamente
summary(iris) #resumen estadistico basico de las columnas (media, mediana, cuartiles,max, min)
str(iris) 		#"repre textual" del objeto
m <- cbind(ord=1:3, edad=c(30L, 26L, 9L))  #creo matriz
v <- c(1.80, 1.72, 1.05)
ff <- data.frame(familia=c("Padre", "Madre", "Hijo"),m, estatura=v)
ff <- data.frame(familia=c("Padre", "Madre", "Hijo"),m, estatura=v,row.names=1)
#############################
WORKDIR <- "/home/clinux01/Descargas/CamiLabo/Practica_2/"
setwd (WORKDIR)
mitabla <- read.table("Leer_tabla.txt")
mitabla
is.data.frame(mitabla)
colnames(mitabla)
rownames(mitabla)
mitabla$Piso
mitabla
mitabla[[2]]
mitabla[2]
mitabla[3, 2]
mitabla[3, 2] <- 106
mitabla$Total <- mitabla$Precio * mitabla$Area
mitabla
datosimp <- data.frame(anyos=c(1.3,0.4,1.1,2.3,3.1,1.3),
tipo=c(2,3,3,1,3,1),edad=c(22,21,34,42,17,43),
sexo=c("H","M","H","H","M","H"))
datosimp
attach(datosimp)      #Para poder “llamar” a cada componente utilizo attach( )
detach(datosimp)      #la operación inversa
datos.hombre.filtrados <- datosimp$anyos[datosimp$sexo=='H']
datos.hombre.filtrados
mas.peq <- subset(datosimp,anyos<2,select=c(edad,sexo))
mas.peq
attach(datosimp)
edad.final <- edad + anyos
datosimp <- transform(datosimp, edad.final = edad+anyos)
datosimp <- transform(datosimp, edad = edad+1)
library(reshape)
head(airquality)
airquality
datos_<-airquality
View(datos_)
View(datos_)
temp_media<-mean(airquality$Temp)
mean(airquality[4])
mean(airquality[[4]])
library(reshape)
temp_m_mato<-airquality$Temp[airquality$Month=="5"]
temp_m_mayo<-mean(airquality$Temp[airquality$Month=="5"])
#3) dia mas ventoso
max_viento<-max(airquality$Wind)
dia_mes<-subset(airquality,wind=max_viento,select=c(Month,day))
dia_mes<-subset(airquality,wind=max_viento,select=c(Month,Day))
dia_mes
dia_mes<-subset(airquality,Wind=max_viento,select=c(Month,Day))
dia_mes
#3) dia mas ventoso
max_viento<-max(airquality$Wind)
dia_mes<-subset(airquality,Wind=max_viento<-max(airquality$Wind),select=c(Month,Day))
dia_mes
dia_mes<-subset(airquality,Wind=20.7,select=c(Month,Day))
dia_mes<-subset(airquality,Wind==max_viento,select=c(Month,Day))
dia_mes
View(dia_mes)
orden.viento<-airquality[orden(airquality$Wind,decresing=FALSE),]
orden.viento<-airquality[order(airquality$Wind,decresing=FALSE),]
orden.viento<-airquality[order(airquality$Wind,)]
orden.viento<-airquality[order(airquality$Wind,decreasing=FALSE),]
datos_mayo<-subset(airquality,airquality$Month=5,select<-c(Day,Month,Solar.R))
datos_mayo<-subset(airquality,airquality$Month==5,select<-c(Day,Month,Solar.R))
View(datos_)
View(datos_mayo)
#6 grafico de mayo
plot(datos_mayo)
#6 grafico de mayo
plot(datos_mayo$Solar.R)
